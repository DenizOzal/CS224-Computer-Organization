CS224
Lab 1
Section 6
Deniz Semih Özal
21802414

# Part 1
# Define an array and state its size in a separate variable and test if it is a symmetric array. Di
# Display array elements and print a message such as "The above array is symmetric". 
# If not symmetric "The above array is not symmetric". For array declaration and for declaring its size you may use lines similar to the following.
# By changing these declarations you may use your program with different arrays.
# Deniz Semih Özal
	.text
	.globl __start
__start:
	la	$t0, array # base adress of an array
	addi 	$s2, $0, 0 # i = 0
	lw	$s1, arrsize
	addi 	$s1, $s1, -1 # arrsize - 1
	
for:
	slt 	$t1, $s2, $s1 # i <  arrsize - 1
	beq 	$t1, $0, symmetric # jumps if symmetric
	sll 	$t1, $s2, 2 # $t1 = i * 4
	add 	$t1, $t1, $t0 # address of array[i]
	lw 	$t2, 0($t1)# $ t2 = array[i]
	sll 	$t3, $s1, 2 # t3 = (arrsize - 1) * 4
	add 	$t3, $t3, $t0 # adress of array[arrsize - 1]
	lw 	$t4, 0($t3) # $t4 = array[arrsize - 1]
	bne 	$t2, $t4, not_symmetric # jumps if notsymmetric
	addi 	$s2, $s2, 1 # i = i + 1
	addi 	$s1, $s1, -1 # arrsize = arrsize - 1
	j 	for
symmetric:
	la 	$a0, array_sym
	li 	$v0, 4
	syscall
	li 	$v0, 10
	syscall
not_symmetric:
	la 	$a0, array_nsym
	li 	$v0, 4
	syscall
	li 	$v0, 10
	syscall	
	
	.data
arrsize: .word 3
array:	.word	10, 20, 10
array_sym: .asciiz "The above array is symmetric"
array_nsym: .asciiz "The above array is not symmetric" 


# Part 2
# Calculating an arithmetic expression in MIPS: Write a program to evaluate the following expression given below (all numbers are integers):
# x = a * (b - c) % d	
# Deniz Semih Özal
	.text
	.globl __start
__start:
	la $a0, input
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	add $t0, $0, $v0 # $t0 = a
	
	li $v0, 5
	syscall
	add $t1, $0, $v0 # t1 = b
	
	li $v0, 5
	syscall
	add $t2, $0, $v0 # t2 = c
	
	li $v0, 5
	syscall
	add $t3, $0, $v0 #  t3 = d
	
	sub $s1, $t1, $t2 # $s1 = b - c
	mult $t0, $s1 # a * (b - c)
	mfhi $t4
	mflo $t5
	div $t4, $t3 # [a * (b - c)] % d -> high
	mfhi $s2 # x (high)
	div $t5, $t3 # [a * (b - c)] % d -> low
	mfhi $s3 # x (low)

	la $a0, open 
	li $v0, 4
	syscall
	
	la $a0, ($s2)
	li $v0, 1
	syscall
	
	la $a0, comma
	li $v0, 4
	syscall
	
	la $a0, ($s3)
	li $v0, 1
	syscall
	
	la $a0, close
	li $v0, 4
	syscall
	
	.data
input: .asciiz "Please enter a,b,c,d respectively:\n"
open: .asciiz "{"
comma: .asciiz ","
close: .asciiz "}"



# Part 3
# Define an array and state its size in a separate variable as you have done in Part 1.
# Find minimum, maximum, and average value of the array elements. Use integer arithmetic.
# Deniz Semih Özal
	.text
	.globl __start
__start:
	la $a0, prompt 
	li $v0, 4
	syscall
	
	la $t0, array # t0 = base address of array
	addi $s0, $zero, 0 # i = 0
	lw $s1, arrsize
	addi $s2, $s1, -1 # arrsize - 1
	
	addi $t3, $zero, -10000 # max
	addi $t4, $zero, 10000 # min
	addi $s3, $zero, 0 # sum
	
loop:
	slt $t1, $s0, $s1 # i < arrsize
	beq $t1, $0, done # if not then done
	sll $t1, $s0, 2 # $t1 = i * 4
	add $t1, $t1, $t0 # address of array[i]	
	li  $v0, 34 
	add $a0, $zero, $t1
	syscall
	
	la $a0, space_tab 
	li $v0, 4
	syscall
	
	
	lw  $t2, 0($t1) # $t2 = array[i]
	la $a0, ($t2)
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall
	
	add $s3, $s3, $t2 # sum = sum + array[i]

	blt $t2, $t4, min_value # array[i] < min then jump to min
	back1:
	bgt $t2, $t3, max_value # array[i] > max then jump to max
	back2:
	
	addi $s0, $s0, 1
	
	j 	loop
	
min_value: 	move $t4, $t2	# min = $t2
		j 	back1

		
max_value:	move $t3, $t2 # max = $t2
		j 	back2
		
done:	
	la $a0, average
	li $v0, 4
	syscall 
	
	div $s3, $s1
	mflo $a0
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall 
	
	la $a0, max
	li $v0, 4
	syscall 
	
	la $a0, ($t3)
	li $v0, 1
	syscall
	
	la $a0, endl
	li $v0, 4
	syscall 
	
	la $a0, min
	li $v0, 4
	syscall 
	
	la $a0, ($t4)
	li $v0, 1
	syscall
	
	.data
array: .word 2, -9, 0, -8, 9, -7, -2, -9
arrsize: .word 8
prompt: .asciiz "Memory Address\t Array Element\nPosition(hex)\t Value(int)\n-------------\t-------------\n-----------\t-------------\n"
space_tab: .asciiz "	"
endl: .asciiz "\n"
average: .asciiz "Average: " 
max: .asciiz "Max: "
min: .asciiz "Min: "


# Part 4
# Write a program that prompts the user for one or more integer input values, reads these values from the keyboard,
# and computes a mathematical formula such as (a different formula may be given by your TA): A= (B * C + D / B - C ) % B
# Deniz Semih Özal
	.text
	.globl __main
__main:
	la $a0, prompt
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	add $t0, $zero, $v0 # $t0 = b
	
	li $v0, 5
	syscall
	add $t1, $zero, $v0 # $t1 = c
	
	li $v0, 5
	syscall
	add $t2, $zero, $v0 # $t2 = d
	
	mult $t0, $t1 # b * c
	mfhi $t3 # b * c -> high
	mflo $t4 # b * c -> low
	
	div $t2, $t0 # d / b
	mflo $t5 # d / b (quotient)
	
	add $s0, $t4, $t5 # b*c + d/b (only $t4 is used since operation is on 32 bits)
	sub $s0, $s0, $t1 # b*c + d/b - c
	
	div $t3, $t0 # (b*c + d/b - c) % b -> high 
	mfhi $t3
	
	div $s0, $t0 # (b*c + d/b - c) % b -> low
	mfhi $s0
	
	la $a0, explain
	li $v0, 4
	syscall
	
	la $a0, open
	li $v0, 4
	syscall
	
	la $a0, ($t3)
	li $v0, 1
	syscall 
	
	la $a0, comma
	li $v0, 4
	syscall
	
	la $a0, ($s0)
	li $v0, 1
	syscall
	
	la $a0, close
	li $v0, 4
	syscall
	
	.data
prompt: .asciiz "Please enter b, c, d respectively\n"
explain: .asciiz "The formula is result = (b*c+d/b-c)%b and step by step firstly 32 bit b and c are multiplied,\n then 64 bit number is divided high and low, secondly d/b is calculated and quotient is used by mflo,\n then adding and subtration is applied, finally the modulo operator used to find the remainder\n"
open: .asciiz "Result: {"
comma: .asciiz ","
close: .asciiz "}"


# Part 5
# Modified version of previous calculation
# A = (B * C) / D + (D - C) % B
# Deniz Semih Özal

	.text
	.globl ___start
___start: 
	la $a0, prompt
	li $v0, 4
	syscall
	
	li $v0, 5
	syscall
	add $t0, $zero, $v0 # $t0 = b
	
	li $v0, 5
	syscall
	add $t1, $zero, $v0 # $t1 = c
	
	li $v0, 5
	syscall
	add $t2, $zero, $v0 # $t2 = d
	
	mult $t0, $t1 # b * c
	mflo $s1 # b * c -> low
	
	div $s1, $t2 # (b * c) / d
	mflo $s1 #quotient
	
	sub $s2, $t2, $t1 # d - c
	div $s2, $t0 # (d - c) % b
	mfhi $s3
	
	add $s4, $s1, $s3 # (b * c) / d + (d - c) % b
	
	la $a0, result
	li $v0, 4 
	syscall
	
	la $a0, ($s4)
	li $v0, 1
	syscall
	
	
	.data
prompt: .asciiz "Please enter b, c, and d recpectively\n"
result: .asciiz "Result: "